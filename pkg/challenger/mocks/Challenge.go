// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Challenge is an autogenerated mock type for the Challenge type
type Challenge struct {
	mock.Mock
}

// GetChallengeMessage provides a mock function with given fields:
func (_m *Challenge) GetChallengeMessage() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChallengeMessage")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ParseChallengeMessage provides a mock function with given fields: message
func (_m *Challenge) ParseChallengeMessage(message string) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for ParseChallengeMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SolvePoW provides a mock function with given fields:
func (_m *Challenge) SolvePoW() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SolvePoW")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// VerifyPoW provides a mock function with given fields: nonce
func (_m *Challenge) VerifyPoW(nonce string) bool {
	ret := _m.Called(nonce)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPoW")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(nonce)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewChallenge creates a new instance of Challenge. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChallenge(t interface {
	mock.TestingT
	Cleanup(func())
}) *Challenge {
	mock := &Challenge{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
